/* @formatter:off * * Dave Rosenberg * Comp 2000 - Data Structures * Lab: Stack ADT & App * Fall, 2021 *  * Usage restrictions: *  * You may use this code for exploration, experimentation, and furthering your * learning for this course. You may not use this code for any other * assignments, in my course or elsewhere, without explicit permission, in * advance, from myself (and the instructor of any other course). *  * Further, you may not post nor otherwise share this code with anyone other than * current students in my sections of this course. Violation of these usage * restrictions will be considered a violation of the Wentworth Institute of * Technology Academic Honesty Policy. * * Do not remove this notice. * * @formatter:on */package edu.wit.scds.comp2000.stack.adt ;import edu.wit.scds.comp2000.stack.ArrayStackCapacity ;import edu.wit.scds.comp2000.stack.StackInterface ;import java.lang.reflect.Array;import java.util.Arrays ;import java.util.EmptyStackException ;/** * A class of stacks whose entries are stored in an array. * * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.0 *  * @author Dave Rosenberg * @version 4.1.0 2019-02-08 initial implementation based on code from textbook *  * @author Luis Gjuraj * @version 4.2.0 2021-10-15 implement per assignment *  * @param <T> *     The type of all objects to store in the stack */public final class ArrayStack<T> implements StackInterface<T>    {    /** initial capacity if not specified */    static final int DEFAULT_CAPACITY = ArrayStackCapacity.DEFAULT.capacityValue ;    /** largest capacity supported by this implementation */    static final int MAX_CAPACITY = ArrayStackCapacity.MAXIMUM.capacityValue ;        private T[] stack ;						// Array of stack entries    private int topIndex ;					// Index of top entry        private boolean integrityOK ;        /*     * constructors     */    /**     * Create an ArrayStack with a default/initial capacity of DEFAULT_CAPACITY     */    public ArrayStack()        {        this( DEFAULT_CAPACITY ) ;        }	// end no-arg constructor    /**     * Create an ArrayStack with an initial capacity specified by the application     *      * @param initialCapacity     *     the initial capacity (limited by MAX_CAPACITY)     */    public ArrayStack( final int initialCapacity )        {        this.integrityOK = false ;        checkCapacity( initialCapacity ) ;        // The cast is safe because the new array contains null entries        @SuppressWarnings( "unchecked" )        final T[] tempStack = (T[]) new Object[ initialCapacity ] ;        this.stack = tempStack ;        this.topIndex = this.stack.length ;        this.integrityOK = true ;        }	// end 1-arg constructor        /*     * public API methods     */    /*     * (non-Javadoc)     * @see edu.wit.scds.comp2000.stack.common.StackInterface#clear()     */    @Override    public void clear()        {        checkIntegrity() ;        // remove all entries from the stack        while ( !isEmpty() )            {            pop() ;                        }   // end while        // Assertion: topIndex is -1        }   // end clear()    /*     * (non-Javadoc)     * @see edu.wit.scds.comp2000.stack.common.StackInterface#isEmpty()     */    @Override    public boolean isEmpty() {        return this.topIndex>this.stack.length-1;    }    /*     * (non-Javadoc)     * @see edu.wit.scds.comp2000.stack.common.StackInterface#peek()     */    @Override    public T peek()        {        checkIntegrity() ;        if ( isEmpty() )            {            throw new EmptyStackException() ;            }        return this.stack[ this.topIndex ] ;        }   // end peek()    /*     * (non-Javadoc)     * @see edu.wit.scds.comp2000.stack.common.StackInterface#pop()     */    @Override    public T pop()        {        final T top = peek() ;        this.stack[ this.topIndex ] = null ; // if the top index was null we wouldn't need it, but just in case it is occupied by something else        this.topIndex++ ;								 // I will leave it there just to make sure it is null in the end                return top ;        }   // end pop()    /*     * (non-Javadoc)     * @see edu.wit.scds.comp2000.stack.common.StackInterface#push(java.lang.Object)     */    @Override    public void push( final T newEntry )        {        checkIntegrity() ;        ensureCapacity() ;        this.topIndex-- ;        this.stack[ this.topIndex ] = newEntry ;        }   // end push()    /*     * private utility methods     */    /**     * Throw an exception if the client requests a capacity that is too large or     * otherwise invalid.     *      * @param capacity     *     the desired capacity - must be greater than or equal to 1 and less than or     *     equal to MAX_CAPACITY     */    private static void checkCapacity( final int capacity )        {        if ( capacity > MAX_CAPACITY )            {            throw new IllegalStateException( "Attempt to create a stack " +                                             "whose capacity exceeds " +                                             "allowed maximum." ) ;            }        if( capacity <= 0 )         	{        	throw new IllegalStateException("Attempt to create a stack " +        									"whose capacity is" +         									"zero or negative.");        	}        // TODO finish this:        // throw an IllegalStateException with the message        // "Attempt to create a stack whose capacity is zero or negative."        // when necessary        }   // end checkCapacity()    /**     * Throw an exception if this object is not initialized.     */    private void checkIntegrity()        {        if ( !this.integrityOK )            {            throw new SecurityException( "ArrayStack object is not " +                                         "initialized properly." ) ;            }        }   // end checkIntegrity()    /**     * Doubles the size of the array {@code stack} if it is full     * <p>     * Precondition: checkIntegrity() has been called.     */    private void ensureCapacity()        {        if ( this.topIndex<=0 ) // If array is full, double its size            {            final int newLength = 2 * this.stack.length ;            checkCapacity( newLength ) ;            T[] temp = (T[])new Object[newLength];            System.arraycopy(this.stack, 0, temp, this.stack.length, this.stack.length);            this.topIndex+=this.stack.length;            // TODO copyOf() won't work so replace this with:            // (1) instantiate the new array and            // (2) copy the contents of stack to the new array            this.stack = Arrays.copyOf( temp, newLength ) ;                        } // end if        }   // end ensureCapacity()    /*     * testing/debugging methods     */        // This method is not typically implemented - I included it for debugging purposes    /*     * (non-Javadoc)     * @see java.lang.toString()     */    @Override    public String toString()        {        return "stack=" + Arrays.toString( this.stack ) +               ", topIndex=" + this.topIndex +                ", integrityOK=" + this.integrityOK ;                }   // end toString()    /**     * (optional) driver for testing/debugging     *      * @param args     *     -unused-     */    public static void main( final String[] args )        {        // OPTIONAL for testing/debugging        StackInterface<String> testStack = new ArrayStack<>() ;                System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "A" );        System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "B" );        System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "C" );        System.out.printf( "%s%n", testStack.toString() ) ;        testStack.push( "D" );        System.out.printf( "%s%n", testStack.toString() ) ;                }   // end main()    } // end class ArrayStack